import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/services.dart' show PlatformException;
import 'package:enjoy_diving/controller/LocationController.dart';
import 'package:enjoy_diving/data/spot.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:enjoy_diving/view/search_drawer.dart';
import 'package:queries/collections.dart';
import 'package:location/location.dart';

import 'package:enjoy_diving/view/settings.dart';
import 'package:enjoy_diving/view/spot_detail.dart';

import 'package:enjoy_diving/search_names.dart';

Future<List<List<String>>> getSpotsDistinctedValuesFromJson() async {
  String json;
  json = await rootBundle.loadString('assets/spots.json');

  List<String> cities = placeSpotsFromJson(json);
  List<String> distinctedCities = new Collection(cities).distinct().toList();

  List<String> kinds = kindSpotsFromJson(json);
  List<String> distinctedKinds = new Collection(kinds).distinct().toList();

  List<List<String>> distinctedValues = new List();
  distinctedValues.add(distinctedCities);
  distinctedValues.add(distinctedKinds);

  return distinctedValues;
}

Future<List<Spot>> getAllSpotsFromJson() async {
  String json;
  json = await rootBundle.loadString('assets/spots.json');

  List<Spot> spotsList = spotsFromJson(json);

  return spotsList;
}

class SpotMapListPage extends StatefulWidget {

  @override
  State<StatefulWidget> createState() => RefreshSpotMapListState();
}

class RefreshSpotMapListState extends State<SpotMapListPage> {

  Future<List<Spot>> currentSpots;

  Map<String, double> fromLocation = null;

  var _listDistanceType = ['Kilometers', 'Miles', 'Minutes'];

  final _formKey = GlobalKey<FormState>();
  final GlobalKey<ScaffoldState> _refreshSpotListStateKey = new GlobalKey<
      ScaffoldState>();

  Widget futurSpotListBuilder() {
    return new FutureBuilder<List<Spot>>(
      future: currentSpots,
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(
            child: CircularProgressIndicator(),
          );
        } else if (snapshot.hasError) {
          return Center(
            child: Text('An error occurred'),
          );
        } else {
          return _SpotList(
            spots: snapshot.data.toList(),
            fromLocation: fromLocation,
          );
        }
      },
    );
  }

  @override
  void initState() {
    super.initState();

    //rechercheBean = new RechercheBean();
    //currentSpots = getSpotsByRechercheBean(rechercheBean);

    LocationController locationController = new LocationController();
    locationController.getCurrentLocation().then((Map<String, double> result) {
      setState(() {
        fromLocation = result;
      });
    }
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _refreshSpotListStateKey,
      drawer: new SearchDrawer(),
      appBar: AppBar(
        title: Text('Dive Insights'),
        actions: <Widget>[
          IconButton(
              icon: Icon(Icons.list),
              onPressed: () {
                Navigator.pushNamed(context, '/');
              }
          ),
          IconButton(
              icon: Icon(Icons.settings),
              onPressed: () {

              }
          ),
        ],
      ),
      body: futurSpotListBuilder(),
    );
  }
}

class _SpotList extends StatelessWidget {
  _SpotList({
    Key key,
    @required this.spots,
    @required this.fromLocation,
  }) : super(key: key);

  final List<Spot> spots;
  final Map<String, double> fromLocation;

  @override
  Widget build(BuildContext context) {
    return ListView.separated(
      itemCount: spots.length,
      separatorBuilder: (context, index) => Divider(),
      itemBuilder: (context, index) => _SpotTile(
        spot: spots[index],
        fromLocation : fromLocation,
      ),
    );
  }
}


class _SpotTile extends StatefulWidget {

  _SpotTile({
    Key key,
    @required this.spot,
    @required this.fromLocation,
  }) : super(key: key);

  final Spot spot;

  Map<String, double> fromLocation;

  @override
  _SpotTileState createState() {
    return new _SpotTileState();
  }
}

class _SpotTileState extends State<_SpotTile> {

  bool isFavorite = false;

  Widget build(BuildContext context) {
    return ListTile(
      title: Hero(
        tag: 'title_${widget.spot.numid}',
        child: Text(
          widget.spot.title,
          style: Theme.of(context).textTheme.subhead,
        ),
      ),
      subtitle: Text(widget.spot.deathLimit.toString() + " m"),
      onTap: () => Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => SpotDetailPage(
            spot: widget.spot,
            fromLocation: widget.fromLocation,
          ),
        ),
      ),
    );
  }
}