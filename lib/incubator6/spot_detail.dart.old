import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:enjoy_diving/incubator6/ApplicationModel.dart';
import 'package:enjoy_diving/model/Spot.dart';
import 'package:enjoy_diving/service/SpotService.dart';
import 'package:enjoy_diving/view/component/SliverBoxContent.dart';
import 'package:enjoy_diving/view/component/SliverGroupHeader.dart';

class SpotDetailPage extends StatefulWidget {

  //Spot spot;
  //Map<String, double> fromLocation;

  SpotService spotService = new SpotService();

  SpotDetailPage({
    Key key,
    //@required this.spot,
    //@required this.fromLocation,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => SpotDetailState(); //spot, fromLocation);
}

class SpotDetailState extends State<SpotDetailPage> {

  /*
  Spot spot;

  Map<String, double> fromLocation;
  */

  /*
  SpotDetailState() {
    //this.spot = ApplicationModel.of(context).toSpot;
    //this.fromLocation = ApplicationModel.of(context).fromLocation;
  }
  */

  @override
  Widget build(BuildContext context) {

    final textTheme = Theme.of(context).textTheme;
    final Spot spot = ApplicationModel.of(context).toSpot;
    final Map<String, double> fromLocation = ApplicationModel.of(context).fromLocation;

    return DefaultTabController(
      length: 3,
      child: Scaffold(
        body: CustomScrollView(
          slivers: <Widget>[
            SliverAppBar(
              title: Hero(
                tag: 'title_${spot.numid}',
                child: Text(
                  spot.title,
                  style: textTheme.title.copyWith(color: Colors.white),
                ),
              ),
              bottom: TabBar(
                tabs: [
                  Tab(icon: Icon(Icons.directions_car)),
                  Tab(icon: Icon(Icons.directions_transit)),
                  Tab(icon: Icon(Icons.directions_bike)),
                ],
              ),
              pinned: true,
              expandedHeight: 256,
              flexibleSpace: FlexibleSpaceBar(
                background: Stack(
                  fit: StackFit.expand,
                  children: <Widget>[
                    Hero(
                      tag: 'image_${spot.numid}',
                      child: CachedNetworkImage(
                        placeholder: (context, url) => Container(
                              color: Colors.black12,
                            ),
                        imageUrl: spot.pictures[0],
                        fit: BoxFit.cover,
                      ),
                    ),
                    // This gradient ensures that the toolbar icons are distinct
                    // against the background image.
                    const DecoratedBox(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment(0.0, -1.0),
                          end: Alignment(0.0, -0.2),
                          colors: <Color>[Color(0x60000000), Color(0x00000000)],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SliverGroupHeader(header: 'DEBUG Location decimal'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    "ID = " + spot.numid,
                    style: textTheme.subhead,
                  ),
                  Text(
                    "GPS Location, latitude = ${fromLocation == null ? 'N/A' : fromLocation['latitude']}, longitude = ${fromLocation == null ? 'N/A' : fromLocation['longitude']}",
                    style: textTheme.subhead,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'DEBUG GPS Location from'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    "WGS 84 = ${fromLocation == null ? 'N/A' : widget.spotService.getLocationsInWSG84(fromLocation['latitude'], fromLocation['longitude'])}",
                    style: textTheme.subhead,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'Informations générales'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    //'Résumé : ${spot.summary}',
                    '${spot.summary}',
                    style: textTheme.title,
                  ),
                  Text(
                    'Lieu : ${spot.place}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Type de spot : ${spot.kind}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Profondeur maxi : ${spot.deathLimit}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Zone d' 'intéret : ${spot.deathInterest}',
                    style: textTheme.subtitle,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'Description'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    '${spot.description}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Histoire : ${spot.story}',
                    style: textTheme.subtitle,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'Sécurité'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    'Lieu d' 'évacuation : ${spot.rescuePoint}',
                    style: textTheme.subhead,
                  ),
                  Text(
                    'Vent à éviter : ${spot.windDirectionNotAllowed}',
                    style: textTheme.subtitle,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'Navigation'),
            SliverBoxContent(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    'Coordonnées GPS (decimal): ${spot.latitude} N / ${spot.longitude} E',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Coordonnées GPS (WSG84) : ${widget.spotService.getLocationsInWSG84(spot.latitude, spot.longitude)}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Coordonnées GPS vérifiées : ${spot.positionVerified.toString()}',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Distance (temps) depuis où l'
                    'on est : ${spot.getTimeToGo(fromLocation)} min',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Distance (nb km) depuis où l'
                    'on est : ${spot.getDistanceFromHereInKm(fromLocation)} km',
                    style: textTheme.subtitle,
                  ),
                  Text(
                    'Les amers : ${spot.amer}',
                    style: textTheme.subtitle,
                  ),
                ],
              ),
            ),
            SliverGroupHeader(header: 'Photos'),
            SliverPadding(
              padding: EdgeInsets.only(
                left: 8,
                right: 8,
                bottom: 8,
              ),
              sliver: SliverGrid.count(
                crossAxisCount: 3,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                children: spot.pictures
                    .skip(1)
                    .map((picture) => CachedNetworkImage(
                          placeholder: (context, url) => Container(
                                color: Colors.black12,
                              ),
                          imageUrl: picture,
                          fit: BoxFit.cover,
                        ))
                    .toList(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
  }
}

/*
class _SliverGroupHeader extends StatelessWidget {
  final String header;

  _SliverGroupHeader({
    Key key,
    @required this.header,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = Theme.of(context).textTheme;
    return SliverToBoxAdapter(
      child: Padding(
        padding: EdgeInsets.symmetric(
          horizontal: 8,
          vertical: 16,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text(
              header,
              style: textTheme.headline,
            ),
            Padding(
              padding: EdgeInsets.only(right: 64),
              child: Container(
                height: 2,
                color: theme.accentColor,
              ),
            )
          ],
        ),
      ),
    );
  }
}

class _SliverBoxContent extends StatelessWidget {
  final Widget child;

  _SliverBoxContent({
    Key key,
    @required this.child,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SliverPadding(
      padding: EdgeInsets.symmetric(horizontal: 8),
      sliver: SliverToBoxAdapter(
        child: child,
      ),
    );
  }
}

*/